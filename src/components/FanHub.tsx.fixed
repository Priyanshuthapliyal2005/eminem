import React, { useState, useRef } from 'react';
import { motion, AnimatePresence, useScroll, useTransform } from 'framer-motion';
import { Heart, Share2, MessageCircle, Star, Users, Trophy, Award, Zap, Crown, Palette, Eye, Filter, SortAsc } from 'lucide-react';

// Enhanced interfaces for FanHub
interface FanArt {
  id: number;
  title: string;
  artist: string;
  image: string;
  likes: number;
  views: number;
  tags: string[];
  creationDate: string;
  rarity: 'common' | 'rare' | 'legendary';
  featured?: boolean;
  category?: 'digital' | 'traditional' | 'graffiti' | 'photography';
}

interface FanComment {
  id: number;
  author?: string;
  user?: string;
  content?: string;
  text?: string;
  likes: number;
  timestamp: string;
  badges?: string[];
  badge?: 'verified' | 'og' | 'active';
  sentiment: 'positive' | 'neutral' | 'negative';
}

interface CommunityStats {
  totalMembers?: number;
  activeToday?: number;
  artworksShared?: number;
  artworksToday: number;
  growthRate: number;
  trending: string[];
  totalFans?: number;
  dailyActive?: number;
  topContributors?: string[];
}

// Combined data from both versions
const fanArtworks: FanArt[] = [
  {
    id: 1,
    title: "Slim Shady Portrait",
    artist: "RapGodFan",
    image: "https://images.pexels.com/photos/1370545/pexels-photo-1370545.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    likes: 2847,
    views: 18493,
    tags: ["portrait", "eminem", "art", "realistic"],
    creationDate: "2024-01-15",
    rarity: 'legendary',
    featured: true,
    category: 'digital'
  },
  {
    id: 2,
    title: "Marshall Mathers Graffiti",
    artist: "DetroitArtist",
    image: "https://images.pexels.com/photos/1762851/pexels-photo-1762851.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    likes: 1924,
    views: 12847,
    tags: ["graffiti", "street-art", "detroit", "mathers"],
    creationDate: "2024-01-12",
    rarity: 'rare',
    category: 'graffiti'
  },
  {
    id: 3,
    title: "Recovery Album Art",
    artist: "MusicLover",
    image: "https://images.pexels.com/photos/1105666/pexels-photo-1105666.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    likes: 1456,
    views: 9384,
    tags: ["recovery", "album", "tribute", "inspiration"],
    creationDate: "2024-01-10",
    rarity: 'common',
    category: 'digital'
  },
  {
    id: 4,
    title: "Lose Yourself Digital Art",
    artist: "PixelMaster",
    image: "https://images.pexels.com/photos/1476799/pexels-photo-1476799.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    likes: 3156,
    views: 21058,
    tags: ["digital", "lose-yourself", "iconic", "motivation"],
    creationDate: "2024-01-08",
    rarity: 'legendary',
    featured: true,
    category: 'digital'
  },
  {
    id: 5,
    title: "8 Mile Tribute",
    artist: "MovieFan",
    image: "https://images.pexels.com/photos/1464625/pexels-photo-1464625.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    likes: 1876,
    views: 14729,
    tags: ["8-mile", "movie", "tribute", "detroit"],
    creationDate: "2024-01-05",
    rarity: 'rare',
    category: 'traditional'
  },
  {
    id: 6,
    title: "Stan Story Art",
    artist: "StoryTeller",
    image: "https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
    likes: 2234,
    views: 16582,
    tags: ["stan", "story", "narrative", "dark"],
    creationDate: "2024-01-03",
    rarity: 'rare',
    category: 'traditional'
  }
];

// Combined comments
const communityComments: FanComment[] = [
  {
    id: 1,
    author: "RapGodFan",
    user: "RapGodFan",
    content: "Eminem's flow on Rap God is absolutely insane! No one can match that speed and clarity.",
    text: "Eminem's flow on Rap God is absolutely insane! No one can match that speed and clarity.",
    likes: 156,
    timestamp: "2024-01-15T10:30:00Z",
    badges: ["verified", "og-fan"],
    badge: 'verified',
    sentiment: 'positive'
  },
  {
    id: 2,
    author: "DetroitLegend",
    user: "DetroitLegend",
    content: "Been listening since Infinite. Marshall's journey is truly inspirational.",
    text: "Been listening since Infinite. Marshall's journey is truly inspirational.",
    likes: 234,
    timestamp: "2024-01-15T09:15:00Z",
    badges: ["og-fan", "active"],
    badge: 'og',
    sentiment: 'positive'
  },
  {
    id: 3,
    author: "MusicCritic",
    user: "MusicCritic",
    content: "Recovery album changed my life. The raw emotion and honesty is unmatched.",
    text: "Recovery album changed my life. The raw emotion and honesty is unmatched.",
    likes: 189,
    timestamp: "2024-01-15T08:45:00Z",
    badges: ["active"],
    badge: 'active',
    sentiment: 'positive'
  }
];

// Combined stats
const communityStats: CommunityStats = {
  totalMembers: 2847593,
  activeToday: 18429,
  artworksShared: 45892,
  artworksToday: 127,
  growthRate: 8.3,
  trending: ["#Recovery", "#RapGod", "#8Mile", "#SlimShady", "#Marshall"],
  totalFans: 1247863,
  dailyActive: 45231,
  topContributors: ["EmFan313", "SlimShadyFanatic", "RapBattleQueen"]
};

const FanHubEnhanced: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'artwork' | 'comments' | 'stats'>('artwork');
  const [selectedArt, setSelectedArt] = useState<FanArt | null>(null);
  const [likedArt, setLikedArt] = useState<number[]>([]);
  const [artFilter, setArtFilter] = useState<'all' | 'common' | 'rare' | 'legendary'>('all');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'likes' | 'views' | 'date'>('likes');

  const sectionRef = useRef<HTMLElement>(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });
  
  const backgroundY = useTransform(scrollYProgress, [0, 1], [0, -200]);
  const floatingY = useTransform(scrollYProgress, [0, 1], [0, -100]);

  // Community symbols for floating animation
  const communitySymbols = ['🎤', '🎵', '🔥', '👑', '⭐', '💎', '🎯', '🌟'];

  const handleLike = (artId: number) => {
    setLikedArt(prev => 
      prev.includes(artId) 
        ? prev.filter(id => id !== artId)
        : [...prev, artId]
    );
  };

  const getRarityColor = (rarity: FanArt['rarity']) => {
    switch (rarity) {
      case 'legendary': return 'border-yellow-400 bg-yellow-400/10';
      case 'rare': return 'border-purple-400 bg-purple-400/10';
      case 'common': return 'border-blue-400 bg-blue-400/10';
      default: return '';
    }
  };

  const getBadgeColor = (badge: string) => {
    switch (badge) {
      case 'verified': return 'bg-blue-600 text-white';
      case 'og-fan': return 'bg-yellow-600 text-white';
      case 'active': return 'bg-green-600 text-white';
      default: return 'bg-gray-600 text-white';
    }
  };

  // Combine filtering logic
  const filteredArtworks = fanArtworks.filter(art => {
    const rarityMatch = artFilter === 'all' || art.rarity === artFilter;
    const categoryMatch = selectedCategory === 'all' || art.category === selectedCategory;
    return rarityMatch && categoryMatch;
  });

  const sortedArtworks = [...filteredArtworks].sort((a, b) => {
    switch (sortBy) {
      case 'likes': return b.likes - a.likes;
      case 'views': return b.views - a.views;
      case 'date': return new Date(b.creationDate).getTime() - new Date(a.creationDate).getTime();
      default: return 0;
    }
  });

  const tabs = [
    { key: 'artwork', label: 'Fan Art', icon: Palette },
    { key: 'comments', label: 'Community', icon: MessageCircle },
    { key: 'stats', label: 'Stats', icon: Trophy },
  ];

  const getBadgeIcon = (badge: string) => {
    switch (badge) {
      case 'verified': return <Crown className="w-4 h-4 text-yellow-400" />;
      case 'og': return <Award className="w-4 h-4 text-orange-400" />;
      case 'active': return <Zap className="w-4 h-4 text-blue-400" />;
      default: return null;
    }
  };

  return (
    <section ref={sectionRef} id="fan-hub" className="section-container bg-gradient-to-b from-black via-gray-900 to-black relative overflow-hidden">
      {/* Enhanced Parallax Background */}
      <motion.div 
        className="absolute inset-0 opacity-20"
        style={{ y: backgroundY }}
      >
        <div className="absolute inset-0 bg-gradient-to-br from-red-900/30 via-transparent to-purple-900/30" />
        <img 
          src="https://images.pexels.com/photos/1540258/pexels-photo-1540258.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1" 
          alt="Fan community background"
          className="w-full h-full object-cover opacity-40" 
        />
      </motion.div>

      {/* Floating Community Symbols */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {communitySymbols.map((symbol, i) => (
          <motion.div
            key={i}
            className="absolute text-3xl"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              y: floatingY,
            }}
            animate={{
              y: [0, -50, 0],
              rotate: [0, 20, -20, 0],
              scale: [1, 1.3, 1],
            }}
            transition={{
              duration: 10 + Math.random() * 5,
              repeat: Infinity,
              delay: Math.random() * 4,
            }}
          >
            {symbol}
          </motion.div>
        ))}
      </div>
      
      <div className="relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
        >
          <h2 className="section-title text-center mb-4">
            <motion.span
              className="inline-block"
              animate={{ 
                textShadow: [
                  "0 0 10px #ef4444",
                  "0 0 20px #ef4444", 
                  "0 0 10px #ef4444"
                ]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              FAN UNIVERSE
            </motion.span>
          </h2>
          
          <p className="text-center text-gray-400 text-lg mb-12 max-w-3xl mx-auto">
            Connect with Eminem fans worldwide. Share artwork, discuss music, and celebrate the legacy together.
          </p>
        </motion.div>

        {/* Enhanced Community Stats Bar */}
        <motion.div 
          className="max-w-6xl mx-auto mb-12"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <motion.div 
            className="bg-black/60 backdrop-blur-sm rounded-xl border border-red-600/30 p-6 shadow-2xl"
            whileHover={{ scale: 1.02 }}
            transition={{ duration: 0.3 }}
          >
            <div className="flex items-center justify-center gap-8 text-center">
              <div className="text-center">
                <div className="text-3xl font-bold text-red-400">
                  {(communityStats.totalMembers || communityStats.totalFans || 0).toLocaleString()}
                </div>
                <div className="text-sm text-gray-400">Total Fans</div>
              </div>
              <div className="w-px h-12 bg-gray-600"></div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-400">
                  {(communityStats.activeToday || communityStats.dailyActive || 0).toLocaleString()}
                </div>
                <div className="text-sm text-gray-400">Active Today</div>
              </div>
              <div className="w-px h-12 bg-gray-600"></div>
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-400">
                  {(communityStats.artworksShared || 0).toLocaleString()}
                </div>
                <div className="text-sm text-gray-400">Artworks</div>
              </div>
              <div className="w-px h-8 bg-gray-600"></div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-400">{communityStats.artworksToday}</div>
                <div className="text-sm text-gray-400">Art Today</div>
              </div>
              <div className="w-px h-8 bg-gray-600"></div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-400">+{communityStats.growthRate}%</div>
                <div className="text-sm text-gray-400">Growth</div>
              </div>
            </div>
          </motion.div>
        </motion.div>
        
        <div className="max-w-6xl mx-auto">
          {/* Enhanced Tabs with Animated Background */}
          <motion.div 
            className="bg-black/60 backdrop-blur-sm rounded-xl border border-red-600/30 shadow-2xl overflow-hidden"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.3 }}
          >
            {/* Tab Navigation with Dynamic Background */}
            <div className="relative flex border-b border-red-600/30">
              {/* Animated tab background */}
              <motion.div 
                className="absolute top-0 bottom-0 bg-gradient-to-r from-red-600 to-red-700 rounded-t-lg z-0"
                animate={{
                  x: activeTab === 'artwork' ? '0%' : activeTab === 'comments' ? '100%' : '200%',
                  width: '33.333%'
                }}
                transition={{ duration: 0.3, ease: "easeInOut" }}
              />
              
              {tabs.map(({ key, label, icon: Icon }) => (
                <motion.button
                  key={key}
                  className={`heading-text flex-1 py-6 text-center text-lg flex items-center justify-center gap-2 transition-all duration-300 relative z-10 ${
                    activeTab === key 
                      ? 'text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                  onClick={() => setActiveTab(key as any)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <motion.div
                    animate={activeTab === key ? { rotate: 360 } : { rotate: 0 }}
                    transition={{ duration: 0.5 }}
                  >
                    <Icon size={20} />
                  </motion.div>
                  {label}
                </motion.button>
              ))}
            </div>
            
            {/* Tab content with AnimatePresence */}
            <div className="p-8">
              <AnimatePresence mode="wait">
                {activeTab === 'artwork' && (
                  <motion.div
                    key="artwork"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    {/* Enhanced Filter Controls */}
                    <div className="flex flex-wrap justify-between items-center gap-4 mb-8">
                      <div className="flex flex-wrap gap-3">
                        {['all', 'legendary', 'rare', 'common'].map((filter) => (
                          <motion.button
                            key={filter}
                            onClick={() => setArtFilter(filter as any)}
                            className={`flex items-center gap-2 px-4 py-2 rounded-full transition-all duration-300 ${
                              artFilter === filter
                                ? 'bg-red-600 text-white shadow-lg'
                                : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-white'
                            }`}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                          >
                            <Filter size={16} />
                            {filter.toUpperCase()}
                          </motion.button>
                        ))}
                      </div>

                      <div className="flex items-center gap-4">
                        <span className="text-gray-400">Sort by:</span>
                        {['likes', 'views', 'date'].map((sort) => (
                          <motion.button
                            key={sort}
                            onClick={() => setSortBy(sort as any)}
                            className={`flex items-center gap-1 px-3 py-1 rounded transition-all duration-300 ${
                              sortBy === sort
                                ? 'bg-red-600 text-white'
                                : 'bg-gray-800 text-gray-400 hover:text-white'
                            }`}
                            whileHover={{ scale: 1.05 }}
                          >
                            <SortAsc size={14} />
                            {sort.toUpperCase()}
                          </motion.button>
                        ))}
                      </div>

                      <div className="flex flex-wrap gap-2 mt-2">
                        {['all', 'digital', 'traditional', 'graffiti', 'photography'].map((category) => (
                          <motion.button
                            key={category}
                            className={`px-3 py-1 rounded-lg text-sm font-medium transition-all ${
                              selectedCategory === category
                                ? 'bg-yellow-600 text-white'
                                : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-white'
                            }`}
                            onClick={() => setSelectedCategory(category)}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                          >
                            <Eye className="w-3 h-3 inline mr-1" />
                            {category.charAt(0).toUpperCase() + category.slice(1)}
                          </motion.button>
                        ))}
                      </div>
                    </div>

                    {/* Enhanced Artwork Grid */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {sortedArtworks.map((art, index) => (
                        <motion.div
                          key={art.id}
                          className={`bg-gray-900/50 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-700/50 hover:border-red-600/50 transition-all duration-300 cursor-pointer group ${getRarityColor(art.rarity)}`}
                          initial={{ opacity: 0, y: 20 }}
                          whileInView={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.5, delay: index * 0.1 }}
                          viewport={{ once: true }}
                          onClick={() => setSelectedArt(art)}
                          whileHover={{ scale: 1.02, y: -5 }}
                        >
                          <div className="relative">
                            <img 
                              src={art.image} 
                              alt={art.title}
                              className="w-full h-48 object-cover transition-transform duration-300 group-hover:scale-110"
                            />
                            
                            {/* Rarity Badge */}
                            <div className={`absolute top-3 right-3 px-2 py-1 rounded-full text-xs font-bold ${
                              art.rarity === 'legendary' ? 'bg-yellow-600 text-white' :
                              art.rarity === 'rare' ? 'bg-purple-600 text-white' :
                              'bg-blue-600 text-white'
                            }`}>
                              {art.rarity.toUpperCase()}
                            </div>

                            {/* Featured Badge */}
                            {art.featured && (
                              <motion.div 
                                className="absolute top-3 left-3 bg-red-600 text-white px-2 py-1 rounded-full text-xs font-bold flex items-center gap-1"
                                animate={{ scale: [1, 1.1, 1] }}
                                transition={{ duration: 2, repeat: Infinity }}
                              >
                                <Star size={12} />
                                FEATURED
                              </motion.div>
                            )}

                            {/* Category Badge */}
                            {art.category && (
                              <div className="absolute bottom-3 left-3 bg-black/50 text-white px-2 py-1 rounded text-xs">
                                {art.category}
                              </div>
                            )}

                            {/* Overlay with Stats */}
                            <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                              <div className="text-center text-white">
                                <div className="flex items-center gap-4 mb-2">
                                  <div className="flex items-center gap-1">
                                    <Eye size={16} />
                                    <span className="text-sm">{art.views.toLocaleString()}</span>
                                  </div>
                                  <div className="flex items-center gap-1">
                                    <Heart size={16} />
                                    <span className="text-sm">{art.likes.toLocaleString()}</span>
                                  </div>
                                </div>
                                <div className="text-xs text-gray-300">Click to view</div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="p-6">
                            <h3 className="heading-text text-xl text-white mb-1">{art.title}</h3>
                            <p className="text-red-400 text-sm mb-2">by {art.artist}</p>
                            
                            {/* Tags */}
                            <div className="flex flex-wrap gap-1 mb-4">
                              {art.tags.map((tag, tagIndex) => (
                                <span 
                                  key={tagIndex}
                                  className="text-xs bg-gray-800 text-gray-300 px-2 py-1 rounded"
                                >
                                  #{tag}
                                </span>
                              ))}
                            </div>
                            
                            <div className="flex justify-between items-center">
                              <motion.button 
                                className="flex items-center gap-2 text-sm group"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleLike(art.id);
                                }}
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                              >
                                <Heart 
                                  className={`w-5 h-5 transition-all ${
                                    likedArt.includes(art.id) 
                                      ? 'text-red-500 fill-current' 
                                      : 'text-gray-400 group-hover:text-red-400'
                                  }`}
                                />
                                <span className={likedArt.includes(art.id) ? 'text-red-500' : 'text-gray-400'}>
                                  {art.likes + (likedArt.includes(art.id) ? 1 : 0)}
                                </span>
                              </motion.button>
                              
                              <motion.button 
                                className="flex items-center gap-2 text-gray-400 hover:text-white text-sm"
                                onClick={(e) => e.stopPropagation()}
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                              >
                                <Share2 size={16} />
                                Share
                              </motion.button>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                )}

                {activeTab === 'comments' && (
                  <motion.div
                    key="comments"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <div className="space-y-6">
                      {communityComments.map((comment, index) => (
                        <motion.div
                          key={comment.id}
                          className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50"
                          initial={{ opacity: 0, y: 20 }}
                          whileInView={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.5, delay: index * 0.1 }}
                          whileHover={{ scale: 1.01, borderColor: 'rgba(239, 68, 68, 0.5)' }}
                        >
                          <div className="flex items-start gap-4">
                            <div className="w-12 h-12 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center text-white font-bold">
                              {(comment.author || comment.user || "").charAt(0)}
                            </div>
                            
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <h4 className="heading-text text-lg text-white">{comment.author || comment.user}</h4>
                                {comment.badges && comment.badges.map((badge, badgeIndex) => (
                                  <span 
                                    key={badgeIndex}
                                    className={`px-2 py-1 rounded-full text-xs font-bold ${getBadgeColor(badge)}`}
                                  >
                                    {badge}
                                  </span>
                                ))}
                                {comment.badge && getBadgeIcon(comment.badge)}
                              </div>
                              
                              <p className="text-gray-300 mb-3 leading-relaxed">{comment.content || comment.text}</p>
                              
                              <div className="flex items-center justify-between">
                                <motion.button 
                                  className="flex items-center gap-2 text-gray-400 hover:text-red-400 transition-colors"
                                  whileHover={{ scale: 1.05 }}
                                  whileTap={{ scale: 0.95 }}
                                >
                                  <Heart size={16} />
                                  <span>{comment.likes}</span>
                                </motion.button>
                                
                                <span className="text-xs text-gray-500">
                                  {comment.timestamp}
                                </span>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                )}

                {activeTab === 'stats' && (
                  <motion.div
                    key="stats"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                        <div className="flex items-center gap-3 mb-4">
                          <Users className="w-8 h-8 text-blue-400" />
                          <h3 className="heading-text text-xl text-white">Community</h3>
                        </div>
                        <div className="space-y-3">
                          <div className="flex justify-between">
                            <span className="text-gray-400">Total Members</span>
                            <span className="text-blue-400 font-bold">
                              {(communityStats.totalMembers || communityStats.totalFans || 0).toLocaleString()}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-400">Active Today</span>
                            <span className="text-blue-400 font-bold">
                              {(communityStats.activeToday || communityStats.dailyActive || 0).toLocaleString()}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-400">Growth Rate</span>
                            <span className="text-green-400 font-bold">+{communityStats.growthRate}%</span>
                          </div>
                        </div>
                      </div>

                      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                        <div className="flex items-center gap-3 mb-4">
                          <Palette className="w-8 h-8 text-purple-400" />
                          <h3 className="heading-text text-xl text-white">Artwork</h3>
                        </div>
                        <div className="space-y-3">
                          <div className="flex justify-between">
                            <span className="text-gray-400">Total Shared</span>
                            <span className="text-purple-400 font-bold">
                              {(communityStats.artworksShared || 0).toLocaleString()}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-400">Today</span>
                            <span className="text-purple-400 font-bold">{communityStats.artworksToday}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-400">Legendary</span>
                            <span className="text-yellow-400 font-bold">
                              {fanArtworks.filter(a => a.rarity === 'legendary').length}
                            </span>
                          </div>
                        </div>
                      </div>

                      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                        <div className="flex items-center gap-3 mb-4">
                          <Star className="w-8 h-8 text-green-400" />
                          <h3 className="heading-text text-xl text-white">Trending</h3>
                        </div>
                        <div className="space-y-2">
                          {communityStats.trending.map((tag, index) => (
                            <div key={index} className="inline-block bg-green-600/20 text-green-400 px-3 py-1 rounded-full text-sm mr-2 mb-2">
                              {tag}
                            </div>
                          ))}
                        </div>
                      </div>

                      {communityStats.topContributors && (
                        <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                          <div className="flex items-center gap-3 mb-4">
                            <Trophy className="w-8 h-8 text-yellow-400" />
                            <h3 className="heading-text text-xl text-white">Top Contributors</h3>
                          </div>
                          <div className="space-y-2">
                            {communityStats.topContributors.map((contributor, index) => (
                              <div key={index} className="flex items-center gap-2">
                                <span className="text-yellow-400">#{index + 1}</span>
                                <span className="text-white">{contributor}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Enhanced Artwork Modal */}
      <AnimatePresence>
        {selectedArt && (
          <motion.div
            className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setSelectedArt(null)}
          >
            <motion.div
              className="bg-gray-900 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              <div className="relative">
                <img 
                  src={selectedArt.image} 
                  alt={selectedArt.title}
                  className="w-full aspect-video object-cover"
                />
                <button
                  className="absolute top-4 right-4 w-10 h-10 bg-black/50 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-black/70 transition-colors"
                  onClick={() => setSelectedArt(null)}
                >
                  ×
                </button>
                <div className={`absolute top-4 left-4 px-3 py-1 rounded-full text-sm font-bold bg-gradient-to-r from-red-600 to-red-500 text-white`}>
                  {selectedArt.rarity.toUpperCase()}
                </div>
                {selectedArt.category && (
                  <div className="absolute bottom-4 left-4 bg-black/50 backdrop-blur-sm px-3 py-1 rounded text-sm text-white">
                    {selectedArt.category}
                  </div>
                )}
              </div>
              
              <div className="p-8">
                <h2 className="heading-text text-3xl text-white mb-2">{selectedArt.title}</h2>
                <p className="text-red-400 text-lg mb-4">by {selectedArt.artist}</p>
                
                <div className="grid grid-cols-3 gap-6 mb-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-red-400">{selectedArt.likes.toLocaleString()}</div>
                    <div className="text-sm text-gray-400">Likes</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-400">{selectedArt.views.toLocaleString()}</div>
                    <div className="text-sm text-gray-400">Views</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-400">
                      {new Date(selectedArt.creationDate).toLocaleDateString()}
                    </div>
                    <div className="text-sm text-gray-400">Created</div>
                  </div>
                </div>
                
                <div className="mb-6">
                  <h3 className="text-white text-lg mb-2">Tags</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedArt.tags.map((tag, index) => (
                      <span 
                        key={index}
                        className="bg-gray-800 text-gray-300 px-3 py-1 rounded-full text-sm"
                      >
                        #{tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </section>
  );
};

export default FanHubEnhanced;
